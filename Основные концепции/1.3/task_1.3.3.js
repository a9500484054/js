// *JS Core. Практическая задача 1.3.3
// sequenceSum
// Реализуйте (с использованием рекурсии) функцию sequenceSum, которая находит сумму последовательности целых чисел. Последовательность задается двумя значениями: begin - начало последовательности, end - конец последовательности. Например: begin = 2 и end = 6 дают нам такую последовательность 2, 3, 4, 5, 6. Сумма такой последовательности будет: 20.

// sequenceSum(1, 5); // 1 + 2 + 3 + 4 + 5 = 15
// sequenceSum(4, 10); // 4 + 5 + 6 + 7 + 8 + 9 + 10 = 49
// sequenceSum(-3, 2); // (-3) + (-2) + (-1) + 0 + 1 + 2 = -3
// Подсказки

// Последовательность, в которой begin > end, не содержит ни одного числа, т.е. является "пустой". Вычислить сумму чисел такой последовательности не представляется возможным, в этом случае возвращаем NaN Сумма чисел последовательности, в которой begin === end, равна begin (или end)

// NaN (т.к. это "пустая" последовательность)
// sequenceSum(7, 2);

// 0 (т.к. это единственное число, входящее в последовательность)
// sequenceSum(0, 0);
// 6 (т.к. это единственное число, входящее в последовательность)
// sequenceSum(6, 6);
// P.S. Для корректного прохождения проверку на рекурсию - вы должны вызывать именно функцию sequenceSum


// function sequenceSum(begin, end) {
// 	let sum
// 	if(sum === undefined) {
// 		sum = begin
// 	}
// 	begin++
	
// 	if(end < begin) {
// 		return sum
// 	} else {
// 		return sum + sequenceSum(begin, end)
// 	}
// }
function sequenceSum(begin, end) {
	let sum
	if(begin > end) return NaN
	if(sum === undefined)	sum = begin
	begin++
	return (end < begin) ? sum : sum + sequenceSum(begin, end)
}
console.log(sequenceSum(8, 6))